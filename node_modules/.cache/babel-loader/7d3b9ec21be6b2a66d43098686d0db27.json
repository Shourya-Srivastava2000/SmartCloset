{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.getCompositeAggsQuery = exports.getAggsQuery = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar getAggsQuery = function getAggsQuery(query, props, include) {\n  var _clonedQuery$aggs;\n\n  var clonedQuery = _extends({}, query);\n\n  var dataField = props.dataField,\n      size = props.size,\n      sortBy = props.sortBy,\n      showMissing = props.showMissing,\n      missingLabel = props.missingLabel;\n  var includesQuery = {};\n\n  if (include) {\n    includesQuery = {\n      include: include\n    };\n  }\n\n  clonedQuery.size = 0;\n  clonedQuery.aggs = (_clonedQuery$aggs = {}, _clonedQuery$aggs[dataField] = {\n    terms: _extends({\n      field: dataField,\n      size: size,\n      order: (0, _helper.getAggsOrder)(sortBy || 'count')\n    }, showMissing ? {\n      missing: missingLabel\n    } : {}, includesQuery)\n  }, _clonedQuery$aggs);\n\n  if (props.nestedField) {\n    clonedQuery.aggs = {\n      reactivesearch_nested: {\n        nested: {\n          path: props.nestedField\n        },\n        aggs: clonedQuery.aggs\n      }\n    };\n  }\n\n  return clonedQuery;\n};\n\nvar getCompositeAggsQuery = function getCompositeAggsQuery(query, props, after) {\n  var _ref, _clonedQuery$aggs2;\n\n  var clonedQuery = _extends({}, query); // missing label not available in composite aggs\n\n\n  var dataField = props.dataField,\n      size = props.size,\n      sortBy = props.sortBy,\n      showMissing = props.showMissing; // composite aggs only allows asc and desc\n\n  var order = sortBy === 'count' ? {} : {\n    order: sortBy\n  };\n  clonedQuery.aggs = (_clonedQuery$aggs2 = {}, _clonedQuery$aggs2[dataField] = {\n    composite: _extends({\n      sources: [(_ref = {}, _ref[dataField] = {\n        terms: _extends({\n          field: dataField\n        }, order, showMissing ? {\n          missing_bucket: true\n        } : {})\n      }, _ref)],\n      size: size\n    }, after)\n  }, _clonedQuery$aggs2);\n\n  if (props.nestedField) {\n    clonedQuery.aggs = {\n      reactivesearch_nested: {\n        nested: {\n          path: props.nestedField\n        },\n        aggs: clonedQuery.aggs\n      }\n    };\n  }\n\n  return clonedQuery;\n};\n\nexports.getAggsQuery = getAggsQuery;\nexports.getCompositeAggsQuery = getCompositeAggsQuery;","map":{"version":3,"sources":["C:/Users/porto/info340-code/pod/340/node_modules/@appbaseio/reactivesearch/lib/components/list/utils.js"],"names":["exports","__esModule","getCompositeAggsQuery","getAggsQuery","undefined","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_helper","require","query","props","include","_clonedQuery$aggs","clonedQuery","dataField","size","sortBy","showMissing","missingLabel","includesQuery","aggs","terms","field","order","getAggsOrder","missing","nestedField","reactivesearch_nested","nested","path","after","_ref","_clonedQuery$aggs2","composite","sources","missing_bucket"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.getCompositeAggsQuery = exports.getAggsQuery = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _helper = require('@appbaseio/reactivecore/lib/utils/helper');\n\nvar getAggsQuery = function getAggsQuery(query, props, include) {\n\tvar _clonedQuery$aggs;\n\n\tvar clonedQuery = _extends({}, query);\n\tvar dataField = props.dataField,\n\t    size = props.size,\n\t    sortBy = props.sortBy,\n\t    showMissing = props.showMissing,\n\t    missingLabel = props.missingLabel;\n\n\n\tvar includesQuery = {};\n\n\tif (include) {\n\t\tincludesQuery = {\n\t\t\tinclude: include\n\t\t};\n\t}\n\n\tclonedQuery.size = 0;\n\tclonedQuery.aggs = (_clonedQuery$aggs = {}, _clonedQuery$aggs[dataField] = {\n\t\tterms: _extends({\n\t\t\tfield: dataField,\n\t\t\tsize: size,\n\t\t\torder: (0, _helper.getAggsOrder)(sortBy || 'count')\n\t\t}, showMissing ? { missing: missingLabel } : {}, includesQuery)\n\t}, _clonedQuery$aggs);\n\n\tif (props.nestedField) {\n\t\tclonedQuery.aggs = {\n\t\t\treactivesearch_nested: {\n\t\t\t\tnested: {\n\t\t\t\t\tpath: props.nestedField\n\t\t\t\t},\n\t\t\t\taggs: clonedQuery.aggs\n\t\t\t}\n\t\t};\n\t}\n\n\treturn clonedQuery;\n};\n\nvar getCompositeAggsQuery = function getCompositeAggsQuery(query, props, after) {\n\tvar _ref, _clonedQuery$aggs2;\n\n\tvar clonedQuery = _extends({}, query);\n\t// missing label not available in composite aggs\n\tvar dataField = props.dataField,\n\t    size = props.size,\n\t    sortBy = props.sortBy,\n\t    showMissing = props.showMissing;\n\n\t// composite aggs only allows asc and desc\n\n\tvar order = sortBy === 'count' ? {} : { order: sortBy };\n\n\tclonedQuery.aggs = (_clonedQuery$aggs2 = {}, _clonedQuery$aggs2[dataField] = {\n\t\tcomposite: _extends({\n\t\t\tsources: [(_ref = {}, _ref[dataField] = {\n\t\t\t\tterms: _extends({\n\t\t\t\t\tfield: dataField\n\t\t\t\t}, order, showMissing ? { missing_bucket: true } : {})\n\t\t\t}, _ref)],\n\t\t\tsize: size\n\t\t}, after)\n\t}, _clonedQuery$aggs2);\n\n\tif (props.nestedField) {\n\t\tclonedQuery.aggs = {\n\t\t\treactivesearch_nested: {\n\t\t\t\tnested: {\n\t\t\t\t\tpath: props.nestedField\n\t\t\t\t},\n\t\t\t\taggs: clonedQuery.aggs\n\t\t\t}\n\t\t};\n\t}\n\n\treturn clonedQuery;\n};\n\nexports.getAggsQuery = getAggsQuery;\nexports.getCompositeAggsQuery = getCompositeAggsQuery;"]},"metadata":{},"sourceType":"script"}